package Project.ChauPhim.Configs;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import Project.ChauPhim.Services.CustomCustomerDetailsService;
import Project.ChauPhim.Services.CustomManagerDetailsService;

@Configuration
public class WebSecurityConfig {

    private final CustomManagerDetailsService managerDetailsService;
    private final CustomCustomerDetailsService customerDetailsService;

    public WebSecurityConfig(CustomManagerDetailsService managerDetailsService,
                             CustomCustomerDetailsService customerDetailsService) {
        this.managerDetailsService = managerDetailsService;
        this.customerDetailsService = customerDetailsService;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/sign-in-manager", "/sign-in-customer", "/css/**", "/js/**").permitAll()
                .requestMatchers("/customer-profile").authenticated() // Yêu cầu đăng nhập
                .anyRequest().authenticated()
            )
            .formLogin(login -> login
                .loginPage("/login-manager")
                .loginPage("/login-customer")
                .permitAll()
            )
            .logout(logout -> logout
                .logoutUrl("/logout")
                .logoutSuccessHandler(new CustomLogoutSuccessHandler()) // Sử dụng handler tùy chỉnh
                .permitAll()
            );

        return http.build();
    }
    // AuthenticationProvider cho Manager
    @Bean
    public DaoAuthenticationProvider managerAuthenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(managerDetailsService);
        provider.setPasswordEncoder(passwordEncoder());
        return provider;
    }

    // AuthenticationProvider cho Customer
    @Bean
    public DaoAuthenticationProvider customerAuthenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(customerDetailsService);
        provider.setPasswordEncoder(passwordEncoder());
        return provider;
    }

    // Cấu hình AuthenticationManager
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
}